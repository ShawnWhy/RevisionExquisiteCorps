{"version":3,"sources":["logo.svg","components/Chat/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Chat","socket","openSocket","transports","chatwindowRef","useRef","useState","interior","setInterior","curtain","setCurtain","userName","setUserName","turn","setTurn","tempUsername","setTempUsername","currentdisplay","setCurrentDisplay","users","setUsers","message","setMessage","messages","setMessages","allStorySegments","setAllStorySegments","storySegment","setStorySegment","rules","setRules","chat","setChat","roomSelect","setRoomSelect","turnSegment","setTurnSegment","dolls","setDolls","rotateHead","setRotateHead","maskFall","setMaskFall","maskFly","setMaskFly","currentPlayer","setCurrentPlayer","initialInstruction","setInitialInstruction","createEndDisplay","segment","segmentArray","split","length","slice","Length","join","useEffect","connect","on","emit","room","current","scrollTop","scrollHeight","user","info","opencurtain","setTimeout","console","log","text","player","tail","id","filter","andreb","classNames","rene","pablo","benjamin","leonora","max","andre","marcel","hostGhost","rooms","1","2","3","4","5","6","7","8","nameTag","setNameTag","nameTagTwo","setNameTagTwo","previousDoll","setPreviousDoll","submitRoom","event","stopPropagation","preventDefault","target","displayNameTag","nameId","hideNameTag","sentCurrentPlayer","className","onClick","type","onChange","e","value","onMouseOver","onMouseLeave","placeholder","open","href","download","ref","map","index","date","key","currentTarget","newMessage","username","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.17a7908f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable no-lone-blocks */\nimport React, { useEffect, useState, useRef } from \"react\";\n// import API from \"../../utils/API\";\nimport Style from \"./chat.css\"\n// import Moment from \"react-moment\";\nimport reactDOM from \"react-dom\";\nimport io from \"socket.io-client\";\n// import { set } from \"mongoose\";\nimport classNames from \"classnames\";\nimport openSocket from 'socket.io-client';\n\n\n\nfunction Chat(){\n\n \n\n//   const socket = io(\"http://localhost:3001\", {autoConnect:false,\n//   transports: [\"websocket\", \"polling\"]\n// });\nconst socket = openSocket (\"wss://revisionexquisite.herokuapp.com/\",{\n\n    transports:[\"websocket\",\"polling\"]\n});\n\nconst sendheatbeat = function sendHeartbeat(){\n  setTimeout(sendHeartbeat, 8000);\n  io.sockets.emit('ping', { beat : 1 });\n}\n//referenced mchatwindow\nconst chatwindowRef = useRef();\n//turn interior stuffs on \n  const [interior, setInterior]= useState(\"off\")\n//turn curtains on and off\n  const [curtain, setCurtain] = useState (\"off\")\n //username\n  const [userName, setUserName] = useState(\"\");\n//set if it's teh client's turn to play\n  const [turn, setTurn] = useState(\"on\")\n//variable used to test and set username\n  const [tempUsername, setTempUsername] = useState (\"\");\n//is username is of the surrealists, then they cannot use it \n//this is the sentence used to pass on and play the game\n  const [sentence, SetSentence] = useState(\"\")\n//this is used to display the first sentence  \n  const [currentdisplay, setCurrentDisplay]=useState(\"please begin the story\")\n//the list of users\n  const [users, setUsers] = useState([\n    ]);\n//if the user wants to communicate\n    const [message, setMessage] = useState(\"\");\n//all the messages goto the message window\n    const [messages, setMessages] = useState([]);\n// this is the repository of all of the written sentences during the game\n  const [allsentences, setAllsentences]=useState([])\n  const [story, setStory]=useState(\"\");\n  const [allStorySegments, setAllStorySegments]=useState([])\n  const [storySegment, setStorySegment]=useState(\"\");\n  const [segmentEnd, setSegmentEnd]=useState(\"\")\n//this controls the final poem modal\n  const [poemModal, setPoemModal]=useState(\"off\")\n//this controls the modal for the rules\n const [rules, setRules]=useState(\"off\")\n //chatwindow\n const [chat, setChat]=useState(\"off\")\n\n// this happens automatically and changes when the \n//username changes\nconst [roomSelect, setRoomSelect]= useState(\"\");\nconst [turnSegment, setTurnSegment]=useState(\"\");\n\nconst[dolls, setDolls]=useState(\"\")\n//rotate head animation\nconst[rotateHead,setRotateHead]=useState(\"off\")\n//fall animation\nconst [maskFall, setMaskFall]=useState(\"off\");\nconst [maskFly, setMaskFly]=useState(\"off\");\n// display the name of the current player\nconst [currentPlayer, setCurrentPlayer]=useState(\"\")\n//   var chatWindow = reactDOM.\nconst [initialInstruction, setInitialInstruction]=useState(\"Welcome dear visitor,  what would you like to be called?\")\nconst createEndDisplay =(segment)=>{\n  // console.log(segment)\n  // console.log('setend')\n   var segmentArray = segment.split(\" \")\n  //  console.log(segmentArray)\n   if(segmentArray.length>5){\n   segmentArray=segmentArray.slice(segmentArray.length - 5, segmentArray.Length)\n  //  console.log(segmentArray)\n  }\n  \n\n   var segmentString = segmentArray.join(\" \");\n   return segmentString\n  //  console.log(segmentString)\n  //  setSegmentEnd (segmentString)\n  //  setCurrentDisplay(segmentString)\n  //  console.log(segmentEnd)\n\n}\n// },[])\nuseEffect(()=>{\n  if(curtain===\"off\")\n  {\n    setDolls(\"on\");\n  } \n},[curtain])\nuseEffect(()=>{\n  if(tempUsername.length>0){\n    setInitialInstruction(\"please also Select a spirit guide\")\n  }\n  if(tempUsername.length===0){\n    setInitialInstruction(\"Welcome dear visitor,what would you like to be called?\")\n  }\n\n},[tempUsername])\n\n//creates the segments that the users see\n  useEffect(()=>{\n    createEndDisplay(turnSegment)\n\n  },[turnSegment])\n\n  useEffect(() => {\n\n\n    if(userName.length>0){\n    socket.connect();\n    socket.on(\"connect\", function () {\n      // console.log(\"clientsideworks\")\n      socket.emit(\"username\", {userName:userName,\n      room:roomSelect\n      }\n      );\n    });}\n    //set all the users in the chatroom \n    socket.on(\"users\", (users) => {\n      setUsers( users);\n    });\n    //when receiving messages\n    socket.on(\"message\", (message) => {\n      // console.log(message);\n      // var id = message.id\n      // console.log(users[id])\n      //push the message into the messages array\n      setMessages((messages) => [...messages, message]);\n      // console.log(chatwindowRef.current.scrollTop);\n      chatwindowRef.current.scrollTop = chatwindowRef.current.scrollHeight;\n      // console.log(chatwindowRef.current.scrollHeight);\n      // console.log(chatwindowRef.current.scrollTop)\n\n      \n    });\n    // as other players connect to the server, the player's name is pushed into the list of players\n    socket.on(\"connected\", (user) => {\n      setUsers((users) => [...users, user]);\n    });\n\n    socket.on(\"start\",info=>{\n      // setAllStorySegments((allStorySegments) => [...allStorySegments, ...info.segments])\n      // var tempStory = allStorySegments.join(\" \")\n      // console.log(tempStory)\n      // setStory(tempStory)\n      // console.log('story')\n      // console.log(story)\n        setCurrentPlayer(info.currentPlayer)\n        opencurtain();\n      if (info.currentPlayer===userName){\n        setTurn(\"on\")\n\n      }\n      else{setTurn(\"off\")\n    setCurrentDisplay(\"\")}\n      })\n    \n      socket.on(\"rejected\",()=>{\n        setInitialInstruction(\"user name already Taken, sorry\")\n        setTimeout(() => {\n          setInitialInstruction(\"Welcome dear visitor,what would you like to be called?\")\n          \n        },1000);\n      })\n\n    socket.on(\"segmentBroadcast\", (segment)=>{\n      console.log(\"newsentence\")\n      console.log(segment.text);\n      console.log(segment.player)\n      setTurnSegment(segment.text)\n      setCurrentPlayer(segment.player);\n      setCurrentDisplay(segment.tail)\n      setAllStorySegments((allStorySegments) => [...allStorySegments, segment.text\n      ])\n      // var tempStory = allStorySegments.join(' ')\n      // setStory(tempStory)\n      // console.log('story')\n      // console.log(story)\n\n      if (segment.player===userName){\n        setTurn(\"on\")\n      }\n      else{setTurn(\"off\")}\n    });\n    \n    //on another player's disconnect, the cient gets the emit, and rids the player\n    //from the list\n    socket.on(\"disconnected\", id => {\n      setUsers((users) => {\n        return users.filter((user) => user.id!==id);\n      });\n    });\n  }\n  , [userName]);\n\n//on the exterior, sets the username for this session\n const handleNameInputChange = function(e){\n   e.preventDefault();\n   e.stopPropagation();\n   setTempUsername(e.target.value);\n   \n }\n//opens the curtian and begins the game\n const opencurtain = () =>{\n   //the player cannot choose any of the surrelists' names\n  if(tempUsername===\"Leonora\"||tempUsername===\"Max\"||tempUsername===\"Marcel\"||tempUsername===\"Andre\"||tempUsername===\"Rene\"||tempUsername===\"Pablo\"||tempUsername===\"Benjamin\" ) {\n  //if so, the thing warns you and then turns off right after\n   setInitialInstruction(\"sorry \"+tempUsername+\" is already playing\")\n  \n  }\n  else if (!roomSelect){\n    setInitialInstruction(\"please click on a spirit guide to choose her/him\")\n  }\n  //if the thing has any thing init, the curtain is turned on\n  else if(tempUsername.length>0&&roomSelect.length>0){\n    setDolls(\"off\");\n    setCurtain(\"on\")\n    setMaskFall(\"on\")\n    setTimeout(() => {\n      setMaskFall(\"off\")\n        }, 2000);\n\n  //turns on and connects to socket.io after two seconds\n    setTimeout(() => {\n      setInterior(\"on\")\n      }, 2000);\n    }\n  }\n\n  //opens the curtian and begins the game\n const submitName = () =>{\n  //the player cannot choose any of the surrelists' names\n if(tempUsername===\"Leonora\"||tempUsername===\"Max\"||tempUsername===\"Marcel\"||tempUsername===\"Andre\"||tempUsername===\"Rene\"||tempUsername===\"Pablo\"||tempUsername===\"Benjamin\" ) {\n //if so, the thing warns you and then turns off right after\n  setInitialInstruction(\"sorry \"+tempUsername+\" is already playing\")\n \n }\n else if (!roomSelect){\n   setInitialInstruction(\"please click on a spirit guide to choose her/him\")\n }\n else if(tempUsername.length>0&&roomSelect.length>0){\n  setUserName(tempUsername)\n\n\n }\n\n }\n\n  //emits the messageout\n  const handleMessageOut = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    var newMessage = {\n      message: message,\n      username: userName,\n      room:roomSelect\n    };\n    // console.log(\"messageout\")\n    // console.log(newMessage)\n    socket.open();\n    socket.emit(\"send\", newMessage);\n    //then set the message variable to blank\n    setMessage(\"\");\n  };\n\n  //the ghost of surrelists past will speak to you\n  const handleMessagetoGhostOut = (event)=>{\n    event.preventDefault();\n    event.stopPropagation();\n    setMaskFly(\"on\")\n\n    socket.open();\n    setTimeout(() => {\n      setMaskFly(\"off\")\n      }, 1000);\n\n    var newMessage = {\n      message: message,\n      username: userName,\n      room:roomSelect\n      };\n      // console.log(\"ghostmessagesent\")\n      // console.log(newMessage)\n      socket.emit(\"sendToGhost\", newMessage);\n      //then set the message variable to blank\n      setMessage(\"\");\n    };\n\n  \n\n  //takes the value from the sentence input and sets it as a variable ready to emit\n  const TypeSegment = (e)=>{\n    e.preventDefault();\n    e.stopPropagation();\n    setStorySegment(e.target.value);\n  }\n\n  //emits the sentence\n  const submitSegment =()=>{\n    setRotateHead(\"on\")\n    let tail = createEndDisplay(storySegment)\n    socket.open();\n    console.log(\"tail=====  \")\n    console.log(tail)\n    socket.emit(\"segment\",{\n      segment:storySegment,\n      tail:tail,\n      room:roomSelect}\n       )\n      \n       console.log(\"emitted sentence to server\")\n       console.log(storySegment)\n    setTimeout(() => {\n      setRotateHead(\"off\")\n      \n    }, 2000);\n  }\n  //opens the modal for the entire poem\n  const openPoem = () =>{\n    setPoemModal(\"on\")\n  }\n  const closePoem = () =>{\n    setPoemModal(\"off\")\n  }\n  //opens the modal for the rules modal\n  const openRules = ()=>{\n    setRules(\"on\")\n  }\n  const closeRules=()=>{\n    setRules(\"off\")\n  }\n\n  const openChat =()=>{\n    setChat(\"on\")\n  }\n  const closeChat =()=>{\n    setChat(\"off\")\n  }\n\n// sets the appearance of the dolls as they are \n//wither selected or not\n\n  const andreb = classNames(\"invisible\",\n  {\n    \"andreb\":dolls===\"on\",\n    \"andrebSelected\":roomSelect===\"1\"\n  });\n  const rene = classNames(\"invisible\",\n  {\n    \"rene\": dolls ===\"on\",\n    \"reneSelected\": roomSelect===\"2\"\n  })\n  const pablo = classNames(\"invisible\",\n{\n    \"pablo\":dolls===\"on\",\n    \"pabloSelected\":roomSelect===\"3\"\n  });\n  const benjamin = classNames(\"invisible\",\n  {\n    \"benjamin\":dolls===\"on\",\n    \"benjaminSelected\":roomSelect===\"4\"\n  });\n  const leonora = classNames(\"invisible\",\n  {\n    \"leonora\":dolls===\"on\",\n    \"leonoraSelected\":roomSelect===\"5\"\n  });\n  const max = classNames(\"invisible\",\n  {\n    \"max\":dolls===\"on\",\n    \"maxSelected\":roomSelect===\"6\"\n  });\n  const andre = classNames(\"invisible\",\n  {\n    \"andre\":dolls===\"on\",\n    \"andreSelected\":roomSelect===\"7\"\n  });\n  const marcel=classNames(\"invisible\",\n  {\"marcel\":dolls===\"on\",\n    \"marcelSelected\":roomSelect===\"8\"}\n\n  )\n\n// className settings for the host head in the gaming room \nconst hostGhost = classNames(\n  {\"ghostHeadAndreB\":roomSelect===\"1\",\n  \"andreBFall\":roomSelect===\"1\"&&maskFall===\"on\",\n\n  \"ghostHeadRene\":roomSelect===\"2\",\n  \"reneFall\":roomSelect===\"2\"&&maskFall===\"on\",\n\n  \"ghostHeadPablo\":roomSelect===\"3\",\n  \"pabloFall\":roomSelect===\"3\"&&maskFall===\"on\",\n\n  \"ghostHeadBenjamin\":roomSelect===\"4\",\n  \"benjaminFall\":roomSelect===\"4\"&&maskFall===\"on\",\n\n  \"ghostHeadLeonora\":roomSelect===\"5\",\n  \"leonoraFall\":roomSelect===\"5\"&&maskFall===\"on\",\n\n  \"ghostHeadMax\":roomSelect===\"6\",\n  \"maxFall\":roomSelect===\"6\"&&maskFall===\"on\",\n\n  \"ghostHeadAndre\":roomSelect===\"7\",\n  \"andreFall\":roomSelect===\"7\"&&maskFall===\"on\",\n\n  \"ghostHeadMarcel\":roomSelect===\"8\",\n  \"marcelFall\":roomSelect===\"8\"&&maskFall===\"on\"},\n\n  {\"rotateHead\":rotateHead===\"on\"},\n  {\"flyAway\":maskFly===\"on\"}\n\n)\n\n// the room numbers\nconst rooms=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"];\n//the name tag setting that displays the name tag on mouse over\nconst [nameTag, setNameTag]=useState({\n  1:\"off\",\n  2:\"off\",\n  3:\"off\",\n  4:\"off\",\n  5:\"off\",\n  6:\"off\",\n  7:\"off\",\n  8:\"off\",\n})\n//the name tag setting that displays when the doll is clicked on \nconst [nameTagTwo, setNameTagTwo]=useState({\n  1:\"off\",\n  2:\"off\",\n  3:\"off\",\n  4:\"off\",\n  5:\"off\",\n  6:\"off\",\n  7:\"off\",\n  8:\"off\",\n})\nconst [previousDoll,setPreviousDoll]=useState(\"\")\n\n//selects the guid as well as he room\nconst submitRoom = (event)=>{\n  event.stopPropagation();\n  event.preventDefault();\n  // console.log(event.target.id)\n  var room =event.target.id;\n  setRoomSelect(room)\n  setNameTagTwo({[room]:\"on\"})\n  // console.log(nameTagTwo);\n  if(previousDoll.length>0){\n    setNameTag({...nameTag,[previousDoll]:\"off\"})\n    // console.log(\"nametag \")\n    // console.log(nameTag)\n  }\n  setPreviousDoll(room)\n  // console.log(\"previousedoll\")\n//  console.log(previousDoll)\n }\n\n // the name tag is displayed after user moves the curser over the figure\nconst displayNameTag=(event)=>{\n  event.stopPropagation();\n  event.preventDefault();\n  var nameId = event.target.id;\n  setNameTag({...nameTag,[nameId]:\"on\"})\n}\n//the name tag of the guides is hidden after user moves curser away\nconst hideNameTag=(event)=>{\n  event.stopPropagation();\n  event.preventDefault();\n  var nameId = event.target.id;\n  if(nameTagTwo[nameId]!==\"on\"){\n  setNameTag({...nameTag,[nameId]:\"off\"})\n}\n}\n\nconst nextPlayer = (event)=>{\n  event.preventDefault();\n  event.stopPropagation();\n  socket.open();\n  socket.emit(\"nextPlayer\",roomSelect)\n    \n}\nsocket.on(\"nextPlayer\",sentCurrentPlayer=>{\n  // console.log(sentCurrentPlayer)\n  // console.log(currentPlayer)\n  setCurrentPlayer(sentCurrentPlayer);\n  // console.log(\"player and current player\")\n  // console.log(currentPlayer)\n  // console.log(userName)\n  if(sentCurrentPlayer===userName){\n    setTurn(\"on\")\n    // console.log(\"turnedon\")\n  }\n  else{\n    setTurn(\"off\")\n    // console.log(\"turnedoff\")\n  }\n\n})\n\n//displays the current player at the top of the main display \n// const currentPlayerDisplay = classNames({\n//   \"invisible\":interior!==\"on\"\n// })\n\n\n \nreturn (\n//everything\n<div className=\"allContainer\">\n\n\n<div className={\"rules \"+(rules ===\"on\"? \"\":\"invisible\")}>\n      <div className={\"rulesContent \"+(rules ===\"on\"? \"visible\":\"invisible\")}>\n        <div className=\"closeRules\" onClick={closeRules}>X</div>\n        <p>How to play: When this game is played in person, each author writes a sentence (or a few sentences) on a piece of paper, then folds the paper so that all or some part of what they wrote is obscurred. The next author then contributes to the story using only the part of the sentence that is visible below the fold.</p>\n      \n        \n    </div>\n  </div>\n  <div className={dolls===\"on\"?\"dollsBackDrop\":\"invisible\"}></div>\n      {/* name input section */}\n      <div className={\"nameInputDiv \"+(curtain===\"on\"? \" invisible\":\"\")}>\n        <div className=\"nameQuestion\">\n          {initialInstruction}\n          </div>\n          {/* input it self */}\n          <input className=\"nameinput\" type=\"text\" onChange={handleNameInputChange}></input>\n          <input type=\"submit\" onClick = {submitName}></input>\n          {/* the warning div */}\n\n    </div>\n<div id ={rooms[0]} className={andreb} onClick={submitRoom} onMouseOver={displayNameTag} onMouseLeave={hideNameTag}><p className={\"nameTag \"+(nameTag[1]===\"on\"?\"\":\"invisible\")}>Andre B</p></div>\n  <div id ={rooms[1]} className={rene} onClick={submitRoom} onMouseOver={displayNameTag} onMouseLeave={hideNameTag}><p className={\"nameTag \"+(nameTag[2]===\"on\"?\"\":\"invisible\")}>Rene</p></div>\n  <div id ={rooms[2]} className={pablo} onClick={submitRoom} onMouseOver={displayNameTag} onMouseLeave={hideNameTag}><p className={\"nameTag \"+(nameTag[3]===\"on\"?\"\":\"invisible\")}>Pablo</p></div>\n  <div id ={rooms[3]} className={benjamin} onClick={submitRoom} onMouseOver={displayNameTag} onMouseLeave={hideNameTag}><p className={\"nameTag \"+(nameTag[4]===\"on\"?\"\":\"invisible\")}>Benjamin</p></div>\n  <div id ={rooms[4]} className={leonora} onClick={submitRoom} onMouseOver={displayNameTag} onMouseLeave={hideNameTag}><p className={\"nameTag \"+(nameTag[5]===\"on\"?\"\":\"invisible\")}>Leonora</p></div>\n  <div id={rooms[5]} className={max} onClick={submitRoom} onMouseOver={displayNameTag} onMouseLeave={hideNameTag}><p className={\"nameTag \"+(nameTag[6]===\"on\"?\"\":\"invisible\")}>max</p></div>\n  <div id ={rooms[6]} className={andre} onClick={submitRoom} onMouseOver={displayNameTag} onMouseLeave={hideNameTag}><p className={\"nameTag \"+(nameTag[7]===\"on\"?\"\":\"invisible\")}>Andre M</p></div>\n  <div id ={rooms[7]} className={marcel} onClick={submitRoom} onMouseOver={displayNameTag} onMouseLeave={hideNameTag}><p className={\"nameTag \"+(nameTag[8]===\"on\"?\"\":\"invisible\")}>Marcel</p></div>\n\n\n{/* the curtain and the name block */}\n  <div className=\"exterior\">\n    <div className={\"leftCurtain \"+( curtain===\"on\"? \"leftcurtainOn\":\"\")}></div>\n    <div className={\"rightCurtain \"+ (curtain===\"on\"? \"rightCurtainOn\":\"\")}></div>\n\n  </div>\n\n  {/* this is the room */}\n  <div className=\"interior \">\n\n<div className={curtain===\"on\"?hostGhost:\"invisible\"}></div> \n \n\n\n\n\n \n      <div className={\"title \"+(interior===\"on\"?\"titleAnimate\": \"invisible\")}>\n      <div className={interior===\"on\"?\"titleText\":\"invisible\"}>welcome {userName}</div>\n      <div className={interior===\"on\"?\"titleText\":\"invisible\"}><h1>let's play Exquisite Corpse!</h1></div>\n      <div className={interior===\"on\"?\"titleText\":\"invisible\"}>current player : {currentPlayer}</div>\n        {/* the game sentence display would go here */}\n      </div>\n    <div className={\"table \"+ (interior===\"on\"? \"tableAnimate\" : \"invisible\")}>\n    <div className={interior===\"on\"?\"titleText\":\"invisible\"}>\n    <div className=\"display \">{currentdisplay}</div>\n    <div className = {turn===\"on\"? \"invisible\":\"\"}>please wait your turn</div>\n    {/* <div className = {turn===\"on\"? \"\":\"invisible\"}>please enter the opposite sentence</div> */}\n\n\n      {/* this is the input div for the sentence, will only be visible when turn is on */}\n      <input  className = {\"sentenceInput \"+(turn===\"on\"?\"\": \"invisible\")} onChange={TypeSegment} type=\"text\" placeholder=\"please proceed\" ></input>\n      <button className={\"submitbutton \"+(turn===\"on\"?\"\": \"invisible\")} onClick={submitSegment}>broadcast Story Segment</button>\n      {/* this is the button to skip to the next player */}\n      <button className=\"turnButtom gameButton\" onClick={nextPlayer}>next player</button>\n      <button className=\"gameButton\"><a href={\"data:text/plain;charset=utf-8, \"+ allStorySegments.join(\"\\n\")} download=\"poem.txt\">download story</a></button>\n      <button className=\"openRulesButton gameButton\" onClick={openRules}>see Rules</button>\n\n      </div>\n    </div>\n\n</div>\n    {/* this is the window for chatting with either players or ghosts of the surrealists  */}\n    <div className={\"sidenavchat \"+(interior===\"on\"?\"visible \":\"invisible \")+(chat===\"on\"?\"largeChat\":\"\")}> \n      <div   className={\"chatWindow \"+(chat===\"on\"?\"visible\":\"invisible\")}>\n          {!messages.length ? (\n                <h1 className=\"chat-title\">Speak</h1>\n                 ) : (\n                 <div  ref= {chatwindowRef} className={\"messageBox \"+(chat===\"on\"?\"onChatbox\":\"\")}> \n                  {messages.map(({ user, date, text }, index) => (\n                    <div\n                      key={index}\n                    \n                      className={user === userName ? \"toLeft\" : \"toRight\"}\n                    >\n                      {user}: {text}{\" \"}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n       <div>\n         {/* the window to type in message */}\n            <input className={\"chatBox \"+(chat===\"on\"?\"visible\":\"invisible\")}\n              type=\"text\"\n              placeholder=\"message\"\n              value={message}\n              onChange={(event) => setMessage(event.currentTarget.value)}\n            />\n            <button className={\"chatbtn \"+(chat===\"on\"?\"\":\"invisible\")} onClick={handleMessageOut}>speak</button>\n            <button className={\"chatbtn \"+(chat===\"on\"?\"\":\"invisible\")} onClick={handleMessagetoGhostOut}>speak with ghost</button>\n            <button className={\"chatbtn \"+(chat===\"on\"?\"\":\"invisible\")} onClick={closeChat}>close chat</button>\n            <button className={\"chatbtn \"+(chat===\"on\"?\"invisible\":\"\")} onClick={openChat}>open chat</button>\n\n            \n             <div className=\"roster \">\n               {/* the roster with ghost  */}\n              <h3>players in the room</h3>\n                <ul id=\"users\">\n                \n                {users.map(({ name, id }) => (\n                  <li key={id} className={(chat===\"on\"?\"centeredLi\":\"\")}>{name}</li>\n                ))}\n              </ul>\n          </div> \n        </div>\n  </div>\n</div>  \n);\n}\n\nexport default Chat;\n ","import React from 'react';\nimport logo from './logo.svg';\nimport Chat from \"./components/Chat\"\nimport './App.css';\n\nfunction App() {\n  return (\n  <Chat/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}